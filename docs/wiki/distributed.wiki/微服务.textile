1、微服务架构师具备的基本基本职责？
a:分析业务需求并切分微服务边界。
b:定义架构规范与文档标准。
c：确保微服务架构的顺利落地。
d:改善微服务架构并提高开发效率。

2、微服务与SOA的区别？
微服务是SOA的一种落地方案。SOA是一种面向服务的架构思想，微服务也同样推崇这种思想。微服务是将一个大型的单块架构，拆分为多个细粒度服务的架构。微服务更加考验我们的是，深入理解业务并合理地对服务边界进行切分。微服务的概念相比SOA更容易落地的原因不是概念上的创新，而是技术上的突破，尤其是容器与自动化运维技术的普及与应用。

3、微服务架构？
 除开发框架和容器技术外，应该具有
（1）注册中心：用于注册微服务相关配置信息的中心，我们选用ZooKeeper实现。
（2）调用中心：用于提供给前端调用的统一入口，我们选用Node.js实现。
（3）部署中心：用于编译并打包微服务源码并将其部署到Docker引擎中，我们选用Jenkins实现。
（4）日志中心：用于收集并管理微服务应用程序中产生的日志。
（5）监控中心：用于监控微服务的实时运行状况。
（6）追踪中心：用于最终微服务的调用轨迹。
（7）消息中心：用于解耦微服务之间的调用关系。
（8）配置中心：用于管理微服务应用程序所需的配置参数。

4、如何根据业务切分微服务边界(如果你是一个架构师你怎么进行服务拆分)？
第一步：梳理业务流程；
第二步：抽取公共服务; 
     在业务流程中与业务不太相关的部分，我们可考虑将其剥离出来，并形成公共服务。例如，邮件发送、文件上传、其他第三方接口等。每种公共服务都对应一个微服务，每个微服务都有相关API，每个API都有自己的输入与输出。这些API一定要形成文档，以便其他服务调用。

第三步：定义业务服务；
     当公共服务抽取完毕后，业务流程中剩下来的部分就是业务服务了。建议刚开始实施微服务时，不要将业务服务的边界切得太细，可以考虑先“大切几块”，但需要确保每个服务之间尽量不要有依赖关系。换句话说，每个服务都是独立的，虽然此时服务的块头可能比较大。
我们先确保这些大块头服务可以运行在微服务基础设施上，再不断将它们进行细化，拆解为更小的服务。

第四步：设计数据模型; 
     深入到每个业务服务中，我们首先要做的是定义它底层所涉及的数据模型，也称为“领域模型”。此时会涉及数据库表结构设计，以及数据模型与关系设计。在数据层面上的设计是至关重要的，如果该部分设计得不到位，将增加后期实现微服务的成本。
这些文档将指导后端工程师顺利地完成微服务实现

第五步：定义服务接口;
服务接口实际上就是一组API，这些API需做到职责单一，而且需要通过名称就能识别出它的业务含义。建议确保每个API的命名是全局唯一的，也建议每个API都有各自的版本号，版本号可以用自增长的方式来体现。
这些文档将指导后端工程师顺利地完成微服务实现

5、轻量级微服务部署架构？

6、轻量级微服务运行架构？

